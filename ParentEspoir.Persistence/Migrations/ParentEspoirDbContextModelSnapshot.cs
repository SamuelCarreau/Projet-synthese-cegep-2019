// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParentEspoir.Persistence;

namespace ParentEspoir.Persistence.Migrations
{
    [DbContext(typeof(ParentEspoirDbContext))]
    partial class ParentEspoirDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("SupportGroupId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("SupportGroupId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.ChildrenAgeBracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ChildrenAgeBrackets");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CitizenStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CitizenStatuses");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(75);

                    b.Property<string>("City")
                        .HasMaxLength(75);

                    b.Property<string>("Country")
                        .HasMaxLength(75);

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int>("FileNumber");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("HeardOfUsFromId");

                    b.Property<DateTime?>("InscriptionDate");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedName");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20);

                    b.Property<string>("Province")
                        .HasMaxLength(75);

                    b.Property<int?>("ReferenceById");

                    b.Property<string>("SecondaryPhone")
                        .HasMaxLength(20);

                    b.Property<int?>("SupportGroupId");

                    b.Property<DateTime?>("SuppressionDate");

                    b.HasKey("CustomerId");

                    b.HasIndex("HeardOfUsFromId");

                    b.HasIndex("ReferenceById");

                    b.HasIndex("SupportGroupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerActivation", b =>
                {
                    b.Property<int>("CustomerActivationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("IsActiveSince");

                    b.Property<DateTime?>("IsInactiveSince");

                    b.HasKey("CustomerActivationId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerActivation");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerChildrenAgeBracket", b =>
                {
                    b.Property<int>("AgeBracketId");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDelete");

                    b.HasKey("AgeBracketId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerChildrenAgeBrackets");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerDescription", b =>
                {
                    b.Property<int>("CustomerDescriptionId");

                    b.Property<int?>("AvailabilityId");

                    b.Property<int>("ChildrenCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("CitizenStatusId");

                    b.Property<int?>("FamilyTypeId");

                    b.Property<bool>("HasBeenHospitalisedInPsychiatry");

                    b.Property<bool>("HasContactWithDPJinPast");

                    b.Property<bool>("HasContactWithDPJnow");

                    b.Property<bool>("HasMentalHealthDiagnostic");

                    b.Property<int?>("HomeTypeId");

                    b.Property<int?>("IncomeSourceId");

                    b.Property<int?>("LanguageSpokenId");

                    b.Property<int?>("LegalCustodyId");

                    b.Property<int?>("MaritalStatusId");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SchoolingId");

                    b.Property<int?>("SexId");

                    b.Property<int?>("TransportTypeId");

                    b.Property<bool?>("WantsToBecomeMember");

                    b.Property<bool>("WillParticipateToHelpingGroup");

                    b.Property<int?>("YearlyIncomeId");

                    b.HasKey("CustomerDescriptionId");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("CitizenStatusId");

                    b.HasIndex("FamilyTypeId");

                    b.HasIndex("HomeTypeId");

                    b.HasIndex("IncomeSourceId");

                    b.HasIndex("LanguageSpokenId");

                    b.HasIndex("LegalCustodyId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolingId");

                    b.HasIndex("SexId");

                    b.HasIndex("TransportTypeId");

                    b.HasIndex("YearlyIncomeId");

                    b.ToTable("CustomerDescriptions");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerSkillToDevelop", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("SkillId");

                    b.Property<bool>("IsDelete");

                    b.HasKey("CustomerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CustomerSkillToDevelops");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerSocialService", b =>
                {
                    b.Property<int>("CustomerId");

                    b.Property<int>("SocialServiceId");

                    b.Property<bool>("IsDelete");

                    b.HasKey("CustomerId", "SocialServiceId");

                    b.HasIndex("SocialServiceId");

                    b.ToTable("CustomerSocialServices");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("DocumentTypeId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("DocumentId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.FamilyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FamilyTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.HeardOfUsFrom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HeardOfUsFroms");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.HomeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("HomeTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.IncomeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.LegalCustody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("LegalCustodies");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommandJSON")
                        .IsRequired();

                    b.Property<string>("CommandName")
                        .IsRequired();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Information");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Member", b =>
                {
                    b.Property<int>("MemberId");

                    b.Property<decimal>("AmountByMonth");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime?>("RenewalDate");

                    b.Property<DateTime?>("SubscriptionDate");

                    b.Property<int>("VolunteeringHourCountByMonth");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("NoteTypeId");

                    b.Property<string>("SupervisorName");

                    b.Property<string>("SupervisorTitle");

                    b.HasKey("NoteId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NoteTypeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NoteTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("State");

                    b.Property<int>("WorkshopTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkshopTypeId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDelete");

                    b.Property<TimeSpan>("NbHourLate");

                    b.Property<int>("SeanceId");

                    b.Property<int?>("Status");

                    b.Property<int>("WorkshopId");

                    b.HasKey("ParticipantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SeanceId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.PersonnalFollowUp", b =>
                {
                    b.Property<int>("PersonnalFollowUpId");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("MeetingCount");

                    b.HasKey("PersonnalFollowUpId");

                    b.ToTable("PersonnalFollowUps");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.PreferedDay", b =>
                {
                    b.Property<int>("CustomerDescriptionID");

                    b.Property<int>("Day");

                    b.Property<bool>("IsDelete");

                    b.HasKey("CustomerDescriptionID", "Day");

                    b.ToTable("PreferedDays");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Pregnancy", b =>
                {
                    b.Property<int>("PregnancyId");

                    b.Property<DateTime>("ChildBirthExpectedDate");

                    b.Property<bool>("IsDelete");

                    b.HasKey("PregnancyId");

                    b.ToTable("Pregnancies");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.ReferenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ReferenceTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Schooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Schoolings");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Seance", b =>
                {
                    b.Property<int>("SeanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("SeanceDate");

                    b.Property<string>("SeanceDescription");

                    b.Property<string>("SeanceName");

                    b.Property<TimeSpan>("SeanceTimeSpan");

                    b.Property<int>("WorkshopId");

                    b.HasKey("SeanceId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Seances");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<int>("Season");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Year");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sexs");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.SkillToDevelop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SkillToDevelops");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.SocialService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SocialServices");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.SupportGroup", b =>
                {
                    b.Property<int>("SupportGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("UserId");

                    b.HasKey("SupportGroupId");

                    b.ToTable("SupportGroups");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.TransportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TransportTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Volunteering", b =>
                {
                    b.Property<int>("VolunteeringId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acknowledgment");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Details");

                    b.Property<int>("HourCount");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Title")
                        .HasMaxLength(75);

                    b.Property<int?>("VolonteeringTypeId");

                    b.HasKey("VolunteeringId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VolonteeringTypeId");

                    b.ToTable("Volunteerings");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.VolunteeringType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("VolunteeringTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Workshop", b =>
                {
                    b.Property<int>("WorkshopId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsOpen");

                    b.Property<int>("SessionId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("WorkshopDescription");

                    b.Property<string>("WorkshopName");

                    b.Property<int>("WorkshopTypeId");

                    b.HasKey("WorkshopId");

                    b.HasIndex("SessionId");

                    b.HasIndex("WorkshopTypeId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.WorkshopType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(25);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("WorkshopTypes");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.YearlyIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("YearlyIncomes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.SupportGroup", "SupportGroup")
                        .WithOne("User")
                        .HasForeignKey("ParentEspoir.Domain.Entities.AppUser", "SupportGroupId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Customer", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.HeardOfUsFrom", "HeardOfUsFrom")
                        .WithMany("Customers")
                        .HasForeignKey("HeardOfUsFromId");

                    b.HasOne("ParentEspoir.Domain.Entities.ReferenceType", "ReferenceBy")
                        .WithMany("Customers")
                        .HasForeignKey("ReferenceById");

                    b.HasOne("ParentEspoir.Domain.Entities.SupportGroup", "SupportGroup")
                        .WithMany("Customers")
                        .HasForeignKey("SupportGroupId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerActivation", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer")
                        .WithMany("CustomerActivations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerChildrenAgeBracket", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.ChildrenAgeBracket", "AgeBracket")
                        .WithMany("CustomerChildrenAgeBrackets")
                        .HasForeignKey("AgeBracketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "Customer")
                        .WithMany("CustomerChildrenAgeBracket")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerDescription", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Availability", "Availability")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("AvailabilityId");

                    b.HasOne("ParentEspoir.Domain.Entities.CitizenStatus", "CitizenStatus")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("CitizenStatusId");

                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithOne("CustomerDescription")
                        .HasForeignKey("ParentEspoir.Domain.Entities.CustomerDescription", "CustomerDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.FamilyType", "FamilyType")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("FamilyTypeId");

                    b.HasOne("ParentEspoir.Domain.Entities.HomeType", "HomeType")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("HomeTypeId");

                    b.HasOne("ParentEspoir.Domain.Entities.IncomeSource", "IncomeSource")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("IncomeSourceId");

                    b.HasOne("ParentEspoir.Domain.Entities.Language", "LanguageSpoken")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("LanguageSpokenId");

                    b.HasOne("ParentEspoir.Domain.Entities.LegalCustody", "LegalCustody")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("LegalCustodyId");

                    b.HasOne("ParentEspoir.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("ParentEspoir.Domain.Entities.Parent", "Parent")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("ParentId");

                    b.HasOne("ParentEspoir.Domain.Entities.Schooling", "Schooling")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("SchoolingId");

                    b.HasOne("ParentEspoir.Domain.Entities.Sex", "Sex")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("SexId");

                    b.HasOne("ParentEspoir.Domain.Entities.TransportType", "TransportType")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("TransportTypeId");

                    b.HasOne("ParentEspoir.Domain.Entities.YearlyIncome", "YearlyIncome")
                        .WithMany("CustomerDescriptions")
                        .HasForeignKey("YearlyIncomeId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerSkillToDevelop", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "Customer")
                        .WithMany("CustomerSkillToDevelop")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.SkillToDevelop", "Skill")
                        .WithMany("CustomerSkillToDevelops")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.CustomerSocialService", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "Customer")
                        .WithMany("CustomerSocialService")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.SocialService", "SocialService")
                        .WithMany("CustomerSocialServices")
                        .HasForeignKey("SocialServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Document", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Member", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithOne("Member")
                        .HasForeignKey("ParentEspoir.Domain.Entities.Member", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Note", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.NoteType", "NoteType")
                        .WithMany("Notes")
                        .HasForeignKey("NoteTypeId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Objective", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithMany("Objectives")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.WorkshopType", "WorkshopType")
                        .WithMany()
                        .HasForeignKey("WorkshopTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Participant", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithMany("WorkshopParticipations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.Seance", "Seance")
                        .WithMany("Participants")
                        .HasForeignKey("SeanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.Workshop", "Workshop")
                        .WithMany("Participants")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.PersonnalFollowUp", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "CustomerDescription")
                        .WithOne("PersonnalFollowUp")
                        .HasForeignKey("ParentEspoir.Domain.Entities.PersonnalFollowUp", "PersonnalFollowUpId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.PreferedDay", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "CustomerDescription")
                        .WithMany("PreferedDays")
                        .HasForeignKey("CustomerDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Pregnancy", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.CustomerDescription", "CustomerDescription")
                        .WithOne("Pregnancy")
                        .HasForeignKey("ParentEspoir.Domain.Entities.Pregnancy", "PregnancyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Seance", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Workshop", "Workshop")
                        .WithMany("Seances")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Volunteering", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Customer", "Customer")
                        .WithMany("Volunteerings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.VolunteeringType", "Type")
                        .WithMany("Volunteerings")
                        .HasForeignKey("VolonteeringTypeId");
                });

            modelBuilder.Entity("ParentEspoir.Domain.Entities.Workshop", b =>
                {
                    b.HasOne("ParentEspoir.Domain.Entities.Session", "Session")
                        .WithMany("Workshops")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParentEspoir.Domain.Entities.WorkshopType", "WorkshopType")
                        .WithMany("Workshops")
                        .HasForeignKey("WorkshopTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
